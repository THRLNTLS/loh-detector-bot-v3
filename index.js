/**
 * –î–µ—Ç–µ–∫—Ç–æ—Ä –ª–æ—Ö–∞ v3.0.0
 * Telegram –±–æ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ "–ª–æ—Ö–∞ –¥–Ω—è" –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
 * Author: THRLNTLS
 */

// –ò–º–ø–æ—Ä—Ç—ã
const TelegramBot = require('node-telegram-bot-api');
const { Octokit } = require('@octokit/rest');
const http = require('http');
require('dotenv').config();

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_OWNER = process.env.GITHUB_OWNER;
const GITHUB_REPO = process.env.GITHUB_REPO;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const BOT_VERSION = '3.0.0';
const PORT = process.env.PORT || 3000;
const AUTOSAVE_INTERVAL = parseInt(process.env.AUTOSAVE_INTERVAL) || 15;
const DICE_DELAY = parseInt(process.env.DICE_DELAY) || 2000;
const SPAM_THRESHOLD = parseInt(process.env.SPAM_THRESHOLD) || 3;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub API (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω)
const octokit = GITHUB_TOKEN ? new Octokit({ auth: GITHUB_TOKEN }) : null;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
const botData = {
    chats: {},     // –î–∞–Ω–Ω—ã–µ –æ —á–∞—Ç–∞—Ö
    users: {},     // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    clicks: {},    // –°—á–µ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    immunity: {},  // –°–∏—Å—Ç–µ–º–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
    stats: {       // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        totalUsers: 0,
        totalMessages: 0,
        totalDiceRolls: 0,
        botStartTime: new Date().toISOString(),
        lastSaveTime: null,
        saveErrors: 0
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
const broadcastStates = new Map();

// ===== –¢–ï–ö–°–¢–´ –°–û–û–ë–©–ï–ù–ò–ô –ò –®–ê–ë–õ–û–ù–´ =====

// –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ —Å –∏—Ö API –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const ANIMATED_EMOJIS = [
    { emoji: 'üé≤', type: 'dice', description: '–∫—É–±–∏–∫' },
    { emoji: 'üéØ', type: 'dart', description: '–¥—Ä–æ—Ç–∏–∫' },
    { emoji: 'üèÄ', type: 'basketball', description: '–±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –º—è—á' },
    { emoji: '‚öΩ', type: 'football', description: '—Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º—è—á' },
    { emoji: 'üé∞', type: 'slot', description: '—Å–ª–æ—Ç-–º–∞—à–∏–Ω—É' },
    { emoji: 'üé≥', type: 'bowling', description: '–±–æ—É–ª–∏–Ω–≥' }
];

// –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É –∞–Ω–∏–º–∞—Ü–∏–∏
const THEMATIC_ANNOUNCEMENTS = {
    'dice': [
        username => `üé≤ –ö—É–±–∏–∫ —Å—É–¥—å–±—ã –≤—ã–±—Ä–∞–ª –ª–æ—Ö–∞ –¥–Ω—è: ${username}!`,
        username => `üé≤ –†–∞–Ω–¥–æ–º —Ä–µ—à–∏–ª —Ç–≤–æ—é —Å—É–¥—å–±—É, ${username}!`
    ],
    'dart': [
        username => `üéØ –î—Ä–æ—Ç–∏–∫ —Å—É–¥—å–±—ã –ø–æ–ø–∞–ª –ø—Ä—è–º–æ –≤ ${username}!`,
        username => `üéØ –¢–æ—á–Ω–æ –≤ —Ü–µ–ª—å! ${username} - —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–æ—Ö!`
    ],
    'basketball': [
        username => `üèÄ –ú—è—á –∑–∞–∫–∏–Ω—É—Ç, ${username} - —Å–µ–≥–æ–¥–Ω—è —Ç—ã MVP —Å—Ä–µ–¥–∏ –ª–æ—Ö–æ–≤!`,
        username => `üèÄ –¢—Ä–µ—Ö–æ—á–∫–æ–≤—ã–π –±—Ä–æ—Å–æ–∫! ${username} –∑–∞–±–∏—Ä–∞–µ—Ç —Ç–∏—Ç—É–ª –ª–æ—Ö–∞ –¥–Ω—è!`
    ],
    'football': [
        username => `‚öΩ –ì–û–û–û–õ! ${username} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–æ—Ö–æ–º –¥–Ω—è!`,
        username => `‚öΩ –ö—Ä–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∏–º—è ${username} - –ª–æ—Ö –¥–Ω—è!`
    ],
    'slot': [
        username => `üé∞ –î–∂–µ–∫–ø–æ—Ç —Å–æ—Ä–≤–∞–Ω! ${username} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–∏—Ç—É–ª –ª–æ—Ö–∞ –¥–Ω—è!`,
        username => `üé∞ –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏! ${username} - —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –ª–æ—Ö —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è!`
    ],
    'bowling': [
        username => `üé≥ –°—Ç—Ä–∞–π–∫! –í—Å–µ –∫–µ–≥–ª–∏ —Å–±–∏—Ç—ã, –∏ ${username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–æ—Ö–æ–º –¥–Ω—è!`,
        username => `üé≥ –ë–æ—É–ª–∏–Ω–≥ –æ–ø—Ä–µ–¥–µ–ª–∏–ª! ${username} - —Å–∞–º—ã–π –º–µ—Ç–∫–∏–π –ª–æ—Ö —Å–µ–≥–æ–¥–Ω—è!`
    ]
};

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ä–µ–¥—ã (–∂–∞–±–∞ –¥–Ω—è)
const WEDNESDAY_FROG_ANNOUNCEMENTS = [
    username => `üê∏ –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ä–µ–¥–∞! ${username} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∂–∞–±–æ–π –¥–Ω—è! It's Wednesday my dudes!`,
    username => `üê∏ –û, –∞ —á–æ–∏—Ç–∞ —Ç—É—Ç —É –Ω–∞—Å? –°—Ä–µ–¥–∞? –ù–∞—Ä–µ–∫–∞—é ${username} –≥–ª–∞–≤–Ω–æ–π –∂–∞–±–æ—é! –ê–º–∏–Ω—å`,
    username => `üê∏ WEDNESDAY ALERT! üê∏ ${username} –°–∫–∞–∂–∏ "–ö–≤–∞".`,
    username => `üê∏ –°–µ—Ä–∏–∞–ª –ø—Ä–æ —Å—Ä–µ–¥—É –≤—Å–µ —Å–º–æ—Ç—Ä–µ–ª–∏? –ï–¥–≤–∞ –ª–∏, –Ω–æ –Ω–µ —Å—É—Ç—å. –≠—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–æ–≥–æ —Ñ–∞–∫—Ç–∞, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –° –† –ï –î –ê! –ê –ø–æ—ç—Ç–æ–º—É ${username} –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–π –∂–∞–±–æ—é —ã—ã—ã–∞–∞–∞ –ø–æ—Ö–ª–æ–ø–∞–µ–º —Ö–æ—Ä–æ–º.`,
    username => `üê∏ AAAAAAAAAAA! IT'S WEDNESDAY MY DUDES! üê∏ ${username} —Å–µ–≥–æ–¥–Ω—è –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –∂–∞–±–æ–π –¥–Ω—è!`
];

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ª–æ—Ö–∞ –¥–Ω—è
const LOSER_ANNOUNCEMENTS = [
    username => `üéØ –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...\n\nüèÜ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–æ—Ö –¥–Ω—è: ${username} üéâ`,
    username => `üîç –í–ù–ò–ú–ê–ù–ò–ï! –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–º —É–∫–∞–∑–æ–º –Ω–∞–∑–Ω–∞—á–∞—é ${username} –ª–æ—Ö–æ–º –¥–Ω—è!`,
    username => `üé≠ –ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å...\n\nüé™ –ò —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ "–õ–æ—Ö –¥–Ω—è" —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${username}!`,
    username => `üß† –ú–æ–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...\n\nü§° ${username} - –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Å–µ–≥–æ–¥–Ω—è –≥–ª–∞–≤–Ω—ã–π –ª–æ—Ö!`
];

// –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
const PHILOSOPHICAL_ANNOUNCEMENTS = [
    username => `üßò‚Äç‚ôÇÔ∏è –î–∑–µ–Ω-–±—É–¥–¥–∏—Å—Ç—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å - –ª–æ—Ö –≤ —Å–≤–æ–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.\n\n–ù–æ —Å–µ–≥–æ–¥–Ω—è ${username} - –ª–æ—Ö –≤–æ –≤—Å–µ—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.`,
    username => `üîÆ –ß—Ç–æ –µ—Å—Ç—å –ª–æ—Ö? –õ–æ—Ö - —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—É—à–∏, –∞ –Ω–µ —á–µ–ª–æ–≤–µ–∫...\n\n–ù–æ —Å–µ–≥–æ–¥–Ω—è ${username} –≤–æ–ø–ª–æ—â–∞–µ—Ç –≤ —Å–µ–±–µ —ç—Ç—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ!`,
    username => `üåå –í –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π, —Å—Ä–µ–¥–∏ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –≥–∞–ª–∞–∫—Ç–∏–∫, –≤ —Å–ø–∏—Ä–∞–ª–∏ –Ω–∞—à–µ–≥–æ –ú–ª–µ—á–Ω–æ–≥–æ –ø—É—Ç–∏...\n\n–ù–µ—Ç –Ω–∏–∫–æ–≥–æ –±–æ–ª—å—à–µ–≥–æ –ª–æ—Ö–∞, —á–µ–º ${username} —Å–µ–≥–æ–¥–Ω—è.`
];

// –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏
const REPEAT_CLICK_RESPONSES = [
    username => `–ê–ª–æ, –ø—Ä–∏—ë–º! –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–æ—Ö —É–∂–µ –≤ —Å—Ç—É–¥–∏–∏, —ç—Ç–æ ${username} üéØ`,
    username => `–ê –Ω–∏—á–µ–≥–æ, —á—Ç–æ –ª–æ—Ö–∞ —É–∂–µ –≤—ã–±—Ä–∞–ª–∏? –≠—Ç–æ ${username}, –µ—Å–ª–∏ —á—Ç–æ ü§¶‚Äç‚ôÇÔ∏è`,
    username => `–ú–æ–∂–µ—Ç —Ö–≤–∞—Ç–∏—Ç –∫–Ω–æ–ø–∫—É –ª–∞–ø–∞—Ç—å? ${username} —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é –∫–æ—Ä–æ–Ω—É –ª–æ—Ö–∞ üëë`,
    username => `–•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, —Å–µ–≥–æ–¥–Ω—è ${username} –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ –Ω–æ—Å–∏—Ç —Ç–∏—Ç—É–ª!`,
    username => `–ù–µ –¥–∞–≤–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞–∫ —á–∞—Å—Ç–æ, –æ–Ω–∞ –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç–∞ —á—Ç–æ ${username} —Å–µ–≥–æ–¥–Ω—è –ª–æ—Ö –¥–Ω—è!`
];

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function getCurrentDate() {
    return new Date().toISOString().split('T')[0]; // YYYY-MM-DD
}

function isWednesday() {
    return new Date().getDay() === 3;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function getRandomElement(array) {
    return array[Math.floor(Math.random() * array.length)];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
function getRandomAnimatedEmoji() {
    return getRandomElement(ANIMATED_EMOJIS);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function formatUsername(user) {
    if (!user) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    return user.username 
        ? `@${user.username}` 
        : `${user.first_name}${user.last_name ? ' ' + user.last_name : ''}`;
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
function logAction(action, details = '') {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${action}${details ? ': ' + details : ''}`);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserPermissionLevel(chatId, userId) {
    if (userId.toString() === ADMIN_ID) return 'GLOBAL_ADMIN';
    if (chatId < 0) { // –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        try {
            const chatMember = await bot.getChatMember(chatId, userId);
            if (['creator', 'administrator'].includes(chatMember.status)) {
                return 'CHAT_ADMIN';
            }
        } catch (error) {
            logAction('PERMISSION_CHECK_ERROR', `Chat: ${chatId}, User: ${userId}, Error: ${error.message}`);
        }
    }
    return 'USER';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub
async function saveToGitHub(filename, data) {
    if (!octokit) return false;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏ –µ–≥–æ SHA (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        let sha;
        try {
            const { data: fileData } = await octokit.repos.getContent({
                owner: GITHUB_OWNER,
                repo: GITHUB_REPO,
                path: `data/${filename}`
            });
            sha = fileData.sha;
        } catch (error) {
            // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        }

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        await octokit.repos.createOrUpdateFileContents({
            owner: GITHUB_OWNER,
            repo: GITHUB_REPO,
            path: `data/${filename}`,
            message: `Update ${filename} - ${new Date().toISOString()}`,
            content: Buffer.from(JSON.stringify(data, null, 2)).toString('base64'),
            sha: sha
        });

        logAction('GITHUB_SAVE', `–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${filename}`);
        return true;
    } catch (error) {
        logAction('GITHUB_SAVE_ERROR', `${filename}: ${error.message}`);
        return false;
    }
}

async function loadFromGitHub(filename) {
    if (!octokit) return null;

    try {
        const { data } = await octokit.repos.getContent({
            owner: GITHUB_OWNER,
            repo: GITHUB_REPO,
            path: `data/${filename}`
        });

        const content = Buffer.from(data.content, 'base64').toString();
        return JSON.parse(content);
    } catch (error) {
        logAction('GITHUB_LOAD_ERROR', `${filename}: ${error.message}`);
        return null;
    }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function autoSave() {
    logAction('AUTOSAVE', '–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub
        if (octokit) {
            await saveToGitHub('bot_data.json', botData);
        }

        botData.stats.lastSaveTime = new Date().toISOString();
        logAction('AUTOSAVE', '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        botData.stats.saveErrors++;
        logAction('AUTOSAVE_ERROR', error.message);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
function getButtonText() {
    return isWednesday()
        ? "üê∏ Ho is da dude today?"
        : "üé≤ –ó–∞–¥–µ—Ç–µ–∫—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –ª–æ—Ö–∞";
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createDetectionKeyboard() {
    return {
        keyboard: [[getButtonText()]],
        resize_keyboard: true,
        one_time_keyboard: false
    };
}

// ===== –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –î–ï–¢–ï–ö–¶–ò–ò =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
function getRandomAnnouncement(username, animationType) {
    // –ï—Å–ª–∏ —Å—Ä–µ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∂–∞–±—ã
    if (isWednesday()) {
        return getRandomElement(WEDNESDAY_FROG_ANNOUNCEMENTS)(username);
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (animationType && THEMATIC_ANNOUNCEMENTS[animationType]) {
        return getRandomElement(THEMATIC_ANNOUNCEMENTS[animationType])(username);
    }

    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–ª–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    return getRandomElement([...LOSER_ANNOUNCEMENTS, ...PHILOSOPHICAL_ANNOUNCEMENTS])(username);
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
function trackUserClick(chatId, userId) {
    const key = `${chatId}_${userId}`;
    if (!botData.clicks[key]) {
        botData.clicks[key] = { count: 0, date: getCurrentDate() };
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (botData.clicks[key].date !== getCurrentDate()) {
        botData.clicks[key] = { count: 0, date: getCurrentDate() };
    }

    botData.clicks[key].count++;
    return botData.clicks[key].count;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ—Ö–∞ –¥–Ω—è
function getCurrentLoser(chatId) {
    const chat = botData.chats[chatId];
    if (!chat) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ª–æ—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    if (chat.loserDate === getCurrentDate() && chat.currentLoser) {
        return chat.currentLoser;
    }
    return null;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ—Ö–∞ –¥–Ω—è
function setLoserOfTheDay(chatId, userId, username) {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!botData.chats[chatId]) {
        botData.chats[chatId] = {
            addedDate: new Date().toISOString(),
            currentLoser: null,
            loserDate: null
        };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ö–µ
    botData.chats[chatId].currentLoser = { userId, username };
    botData.chats[chatId].loserDate = getCurrentDate();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!botData.users[userId]) {
        botData.users[userId] = {
            username,
            totalChecks: 0,
            loserCount: 0,
            firstSeen: new Date().toISOString(),
            lastSeen: new Date().toISOString()
        };
        botData.stats.totalUsers++;
    }

    botData.users[userId].loserCount++;
    botData.users[userId].lastSeen = new Date().toISOString();
    botData.users[userId].username = username; // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–æ—Ö–∞
async function detectLoser(chatId, fromUserId) {
    const entityType = isWednesday() ? '–∂–∞–±—É' : '–ª–æ—Ö–∞';
    logAction('DETECT_START', `–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${entityType} –≤ —á–∞—Ç–µ ${chatId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fromUserId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ –ª–æ—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const currentLoser = getCurrentLoser(chatId);

    if (currentLoser) {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
        const clickCount = trackUserClick(chatId, fromUserId);

        // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤, –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞—é—â–µ–≥–æ –Ω–æ–≤—ã–º –ª–æ—Ö–æ–º
        if (clickCount >= SPAM_THRESHOLD) {
            const spammerUser = botData.users[fromUserId];
            const spammerUsername = spammerUser ? spammerUser.username : '–°–ø–∞–º–µ—Ä';

            setLoserOfTheDay(chatId, fromUserId, spammerUsername);

            return bot.sendMessage(chatId,
                `ü§¶‚Äç‚ôÇÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å ${entityType} –¥–Ω—è - —ç—Ç–æ —Ç—ã, ${spammerUsername}!\n\n` +
                `${currentLoser.username} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç –æ–∫–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–≤–æ–µ–º—É —Å–ø–∞–º—É.`
            );
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        const response = getRandomElement(REPEAT_CLICK_RESPONSES)(currentLoser.username);
        return bot.sendMessage(chatId, response);
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        const chat = await bot.getChat(chatId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        const admins = await bot.getChatAdministrators(chatId);
        if (!admins || admins.length < 2) {
            return bot.sendMessage(chatId, 
                '–í —á–∞—Ç–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ—Ö–∞ –¥–Ω—è! ' +
                '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ —Å—á–∏—Ç–∞—è –±–æ—Ç–æ–≤).'
            );
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–º
        const eligibleAdmins = admins.filter(admin => 
            !admin.user.is_bot && 
            !hasImmunity(chatId, admin.user.id)
        );

        if (eligibleAdmins.length === 0) {
            return bot.sendMessage(chatId,
                `–í —ç—Ç–æ–º —á–∞—Ç–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–º–µ—é—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –≤—ã–±–æ—Ä–∞ ${entityType} –¥–Ω—è! ` +
                '–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞.'
            );
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const selectedAdmin = getRandomElement(eligibleAdmins);
        const loserUsername = formatUsername(selectedAdmin.user);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.sendMessage(chatId, `üîç –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã—á–∏—Å–ª—è—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ ${entityType}...`);

        // –í—ã–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        const randomAnimation = getRandomAnimatedEmoji();
        await bot.sendDice(chatId, { emoji: randomAnimation.emoji });
        botData.stats.totalDiceRolls++;

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, DICE_DELAY));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ—Ö–∞ –¥–Ω—è
        setLoserOfTheDay(chatId, selectedAdmin.user.id, loserUsername);

        // –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const announcement = getRandomAnnouncement(loserUsername, randomAnimation.type);
        await bot.sendMessage(chatId, announcement);

        logAction('DETECT_SUCCESS', `${loserUsername} –æ–±—ä—è–≤–ª–µ–Ω ${entityType}–º –¥–Ω—è`);

    } catch (error) {
        logAction('DETECT_ERROR', error.message);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ª–æ—Ö–∞ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        if (msg.chat.type === 'private') {
            await bot.sendMessage(chatId,
                'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ—Ö–∞ –¥–Ω—è.\n\n' +
                '‚ùóÔ∏è –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.\n' +
                '‚û°Ô∏è –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'
            );
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!botData.chats[chatId]) {
            botData.chats[chatId] = {
                title: msg.chat.title,
                type: msg.chat.type,
                addedDate: new Date().toISOString(),
                currentLoser: null,
                loserDate: null
            };
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.sendMessage(chatId,
            'üé≤ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n' +
            'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /loser –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ—Ö–∞ –¥–Ω—è.',
            { reply_markup: createDetectionKeyboard() }
        );

    } catch (error) {
        logAction('START_ERROR', error.message);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const permissionLevel = await getUserPermissionLevel(chatId, userId);
        const entityType = isWednesday() ? '–∂–∞–±—É' : '–ª–æ—Ö–∞';
        const buttonText = getButtonText();

        let helpMessage = `üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n` +
            `üé≤ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n` +
            `/loser - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å ${entityType} –¥–Ω—è\n` +
            `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n` +
            `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n` +
            `/myid - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n\n` +
            `‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `‚Ä¢ –ö–Ω–æ–ø–∫–∞ "${buttonText}"\n\n` +
            `üéØ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n` +
            `1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /loser\n` +
            `2. –°–º–æ—Ç—Ä–∏ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é\n` +
            `3. –£–∑–Ω–∞–π, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è ${entityType} –¥–Ω—è!\n\n` +
            `–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
        if (permissionLevel === 'CHAT_ADMIN' || permissionLevel === 'GLOBAL_ADMIN') {
            helpMessage += `\n\nüõ°Ô∏è *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞:*\n` +
                `/immunity list - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–º\n` +
                `/immunity @user 7 - –í—ã–¥–∞—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç –Ω–∞ 7 –¥–Ω–µ–π\n` +
                `/immunity remove @user - –£–¥–∞–ª–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç\n\n` +
                `–ö–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–º –æ—Ç –≤—ã–±–æ—Ä–∞ ${entityType}–º.`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (permissionLevel === 'GLOBAL_ADMIN') {
            helpMessage += `\n\nüëë *–ö–æ–º–∞–Ω–¥—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n` +
                `/broadcast - –í—ã–±–æ—Ä–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
                `/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö\n` +
                `/dbstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n` +
                `/dbstats reset - –°–±—Ä–æ—Å –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n` +
                `üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n` +
                `‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ —á–µ—Ä–µ–∑ /broadcast\n` +
                `‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ backup —á–µ—Ä–µ–∑ /backup\n` +
                `‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /dbstats`;
        }

        helpMessage += `\n\n–í–µ—Ä—Å–∏—è: ${BOT_VERSION}`;

        await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });

    } catch (error) {
        logAction('HELP_ERROR', error.message);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        const chat = botData.chats[chatId];
        if (!chat) {
            return bot.sendMessage(chatId, '–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }

        const currentLoser = getCurrentLoser(chatId);
        const entityType = isWednesday() ? '–ñ–∞–±–∞' : '–õ–æ—Ö';

        let statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞*\n\n`;

        // –¢–µ–∫—É—â–∏–π –ª–æ—Ö/–∂–∞–±–∞
        if (currentLoser) {
            statsMessage += `üëë –¢–µ–∫—É—â–∏–π ${entityType.toLowerCase()} –¥–Ω—è: ${currentLoser.username}\n\n`;
        }

        // –¢–æ–ø –ª–æ—Ö–æ–≤
        const topLosers = Object.entries(botData.users)
            .filter(([userId, user]) => {
                const member = botData.users[userId];
                return member && member.loserCount > 0;
            })
            .sort((a, b) => b[1].loserCount - a[1].loserCount)
            .slice(0, 5);

        if (topLosers.length > 0) {
            statsMessage += `üèÜ *–¢–æ–ø ${entityType.toLowerCase()}–æ–≤ –≤—Å–µ—Ö –≤—Ä–µ–º—ë–Ω:*\n`;
            topLosers.forEach((entry, index) => {
                const [_, user] = entry;
                statsMessage += `${index + 1}. ${user.username} - ${user.loserCount} —Ä–∞–∑(–∞)\n`;
            });
        }

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        statsMessage += `\nüìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
            `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫: ${botData.stats.totalDiceRolls}\n` +
            `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${Object.keys(botData.users).length}\n` +
            `‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date(chat.addedDate).toLocaleDateString()}\n`;

        await bot.sendMessage(chatId, statsMessage);
        

    } catch (error) {
        logAction('STATS_ERROR', error.message);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /myid
bot.onText(/\/myid/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    await bot.sendMessage(chatId, 
        `üÜî –í–∞—à Telegram ID: \`${userId}\`\n` +
        `üí≠ Chat ID: \`${chatId}\``,
        { parse_mode: 'Markdown' }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏
bot.onText(/üé≤ –ó–∞–¥–µ—Ç–µ–∫—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –ª–æ—Ö–∞|üê∏ Ho is da dude today\?/, async (msg) => {
    if (msg.chat.type === 'private') {
        return bot.sendMessage(msg.chat.id,
            '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É.'
        );
    }
    await detectLoser(msg.chat.id, msg.from.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /loser
bot.onText(/\/loser/, async (msg) => {
    if (msg.chat.type === 'private') {
        return bot.sendMessage(msg.chat.id,
            '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É.'
        );
    }
    await detectLoser(msg.chat.id, msg.from.id);
});

// ===== –°–ò–°–¢–ï–ú–ê –ò–ú–ú–£–ù–ò–¢–ï–¢–ê =====

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function hasImmunity(chatId, userId) {
    if (!botData.immunity[chatId] || !botData.immunity[chatId][userId]) {
        return false;
    }

    const immunity = botData.immunity[chatId][userId];
    const currentDate = getCurrentDate();
    return immunity.expiryDate >= currentDate;
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–≤
function cleanupExpiredImmunity() {
    const currentDate = getCurrentDate();
    let cleanupCount = 0;

    for (const chatId in botData.immunity) {
        for (const userId in botData.immunity[chatId]) {
            if (botData.immunity[chatId][userId].expiryDate < currentDate) {
                delete botData.immunity[chatId][userId];
                cleanupCount++;
            }
        }
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Ç—ã
        if (Object.keys(botData.immunity[chatId]).length === 0) {
            delete botData.immunity[chatId];
        }
    }

    if (cleanupCount > 0) {
        logAction('IMMUNITY_CLEANUP', `–£–¥–∞–ª–µ–Ω–æ ${cleanupCount} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–≤`);
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
function parseImmunityCommand(text) {
    const parts = text.split(' ').filter(part => part);
    if (parts.length < 2) return null;

    const command = parts[1].toLowerCase();
    const username = parts[2] ? parts[2].replace('@', '') : null;
    const days = parts[3] ? parseInt(parts[3]) : null;

    return { command, username, days };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
bot.onText(/\/immunity(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const permissionLevel = await getUserPermissionLevel(chatId, userId);
        if (permissionLevel !== 'CHAT_ADMIN' && permissionLevel !== 'GLOBAL_ADMIN') {
            return bot.sendMessage(chatId,
                '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–º.\n' +
                '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.'
            );
        }

        const args = parseImmunityCommand(msg.text);
        if (!args) {
            return bot.sendMessage(chatId,
                '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
                '/immunity list - —Å–ø–∏—Å–æ–∫ –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–≤\n' +
                '/immunity @username 7 - –≤—ã–¥–∞—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç –Ω–∞ 7 –¥–Ω–µ–π\n' +
                '/immunity remove @username - —É–¥–∞–ª–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç'
            );
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞
        if (!botData.immunity[chatId]) {
            botData.immunity[chatId] = {};
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–æ–º–∞–Ω–¥
        switch (args.command) {
            case 'list':
                // –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–≤
                const immunities = botData.immunity[chatId];
                if (!immunities || Object.keys(immunities).length === 0) {
                    return bot.sendMessage(chatId, 'üìã –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–≤.');
                }

                let listMessage = 'üõ°Ô∏è *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–≤:*\n\n';
                for (const [userId, immunity] of Object.entries(immunities)) {
                    if (hasImmunity(chatId, userId)) {
                        listMessage += `‚Ä¢ ${immunity.username} - –¥–æ ${immunity.expiryDate}\n`;
                    }
                }

                await bot.sendMessage(chatId, listMessage, { parse_mode: 'Markdown' });
                break;

            case 'remove':
                // –£–¥–∞–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
                if (!args.username) {
                    return bot.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /immunity remove @username');
                }

                // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
                let targetUserId = null;
                for (const [uid, immunity] of Object.entries(botData.immunity[chatId] || {})) {
                    if (immunity.username.replace('@', '') === args.username) {
                        targetUserId = uid;
                        break;
                    }
                }

                if (!targetUserId || !botData.immunity[chatId][targetUserId]) {
                    return bot.sendMessage(chatId, '‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞.');
                }

                delete botData.immunity[chatId][targetUserId];
                await bot.sendMessage(chatId, `‚úÖ –ò–º–º—É–Ω–∏—Ç–µ—Ç –¥–ª—è ${args.username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
                break;

            default:
                // –í—ã–¥–∞—á–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
                if (!args.username) {
                    return bot.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /immunity @username 7');
                }

                if (!args.days || args.days < 1 || args.days > 30) {
                    return bot.sendMessage(chatId,
                        '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç 1 –¥–æ 30:\n' +
                        '/immunity @username 7'
                    );
                }

                // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
                try {
                    const chatMembers = await bot.getChatAdministrators(chatId);
                    const targetUser = chatMembers.find(
                        member => member.user.username && 
                        member.user.username.toLowerCase() === args.username.toLowerCase()
                    );

                    if (!targetUser) {
                        return bot.sendMessage(chatId,
                            '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö —á–∞—Ç–∞.\n' +
                            '–ò–º–º—É–Ω–∏—Ç–µ—Ç –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.'
                        );
                    }

                    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
                    const currentDate = new Date();
                    const expiryDate = new Date();
                    expiryDate.setDate(currentDate.getDate() + args.days);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–º—É–Ω–∏—Ç–µ—Ç
                    botData.immunity[chatId][targetUser.user.id] = {
                        username: `@${targetUser.user.username}`,
                        expiryDate: expiryDate.toISOString().split('T')[0],
                        grantedDate: currentDate.toISOString().split('T')[0]
                    };

                    await bot.sendMessage(chatId,
                        `‚úÖ –ò–º–º—É–Ω–∏—Ç–µ—Ç –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${targetUser.user.username}\n` +
                        `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiryDate.toISOString().split('T')[0]}`
                    );

                    logAction('IMMUNITY_GRANT',
                        `–í—ã–¥–∞–Ω –∏–º–º—É–Ω–∏—Ç–µ—Ç @${targetUser.user.username} –≤ —á–∞—Ç–µ ${chatId} –Ω–∞ ${args.days} –¥–Ω–µ–π`
                    );

                } catch (error) {
                    logAction('IMMUNITY_ERROR', error.message);
                    await bot.sendMessage(chatId,
                        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:\n' +
                        '1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n' +
                        '2. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n' +
                        '3. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ'
                    );
                }
        }

    } catch (error) {
        logAction('IMMUNITY_ERROR', error.message);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–º.');
    }
});

// ===== –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–û–ö =====

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
function createBroadcastKeyboard(selectedChats = []) {
    const chats = Object.entries(botData.chats)
        .filter(([chatId, chat]) => chat.title) // –¢–æ–ª—å–∫–æ —á–∞—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        .map(([chatId, chat]) => ({
            id: chatId,
            title: chat.title
        }));

    const keyboard = [];

    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    keyboard.push([{
        text: 'üì¢ –í—Å–µ —á–∞—Ç—ã',
        callback_data: 'broadcast_all'
    }]);

    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    chats.forEach(chat => {
        const isSelected = selectedChats.includes(chat.id);
        keyboard.push([{
            text: `${isSelected ? '‚úÖ' : 'üí≠'} ${chat.title}`,
            callback_data: `broadcast_chat_${chat.id}`
        }]);
    });

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.push([
        {
            text: `‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (${selectedChats.length} —á–∞—Ç–æ–≤)`,
            callback_data: 'broadcast_confirm'
        }
    ]);
    keyboard.push([
        {
            text: '‚ùå –û—Ç–º–µ–Ω–∞',
            callback_data: 'broadcast_cancel'
        }
    ]);

    return {
        inline_keyboard: keyboard
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /broadcast
bot.onText(/\/broadcast/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (userId.toString() !== ADMIN_ID) {
            return bot.sendMessage(chatId,
                '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n' +
                '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            );
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcastStates.set(userId, {
            step: 'selecting_chats',
            selectedChats: [],
            originalMessageId: null
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
        const message = await bot.sendMessage(chatId,
            'üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n' +
            '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞\n' +
            '‚Ä¢ "–í—Å–µ —á–∞—Ç—ã" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö\n' +
            '‚Ä¢ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ\n' +
            '‚Ä¢ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏',
            {
                parse_mode: 'Markdown',
                reply_markup: createBroadcastKeyboard([])
            }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const state = broadcastStates.get(userId);
        state.originalMessageId = message.message_id;
        broadcastStates.set(userId, state);

    } catch (error) {
        logAction('BROADCAST_ERROR', error.message);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const chatId = query.message.chat.id;
    const data = query.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if (!data.startsWith('broadcast_')) {
        return;
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (userId.toString() !== ADMIN_ID) {
            await bot.answerCallbackQuery(query.id, {
                text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π',
                show_alert: true
            });
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        const state = broadcastStates.get(userId);
        if (!state) {
            await bot.answerCallbackQuery(query.id, {
                text: '‚ùå –°–µ—Å—Å–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ',
                show_alert: true
            });
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if (data === 'broadcast_all') {
            // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
            state.selectedChats = Object.keys(botData.chats);
        } else if (data === 'broadcast_confirm') {
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            if (state.selectedChats.length === 0) {
                await bot.answerCallbackQuery(query.id, {
                    text: '‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç',
                    show_alert: true
                });
                return;
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            state.step = 'waiting_message';
            await bot.editMessageText(
                'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n' +
                `üì¢ –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${state.selectedChats.length} —á–∞—Ç–æ–≤\n` +
                '‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
                {
                    chat_id: chatId,
                    message_id: state.originalMessageId,
                    reply_markup: { inline_keyboard: [] }
                }
            );

        } else if (data === 'broadcast_cancel') {
            // –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcastStates.delete(userId);
            await bot.editMessageText(
                '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                {
                    chat_id: chatId,
                    message_id: state.originalMessageId,
                    reply_markup: { inline_keyboard: [] }
                }
            );

        } else if (data.startsWith('broadcast_chat_')) {
            // –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
            const selectedChatId = data.replace('broadcast_chat_', '');
            const index = state.selectedChats.indexOf(selectedChatId);

            if (index === -1) {
                state.selectedChats.push(selectedChatId);
            } else {
                state.selectedChats.splice(index, 1);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –≤—ã–±–∏—Ä–∞–µ–º —á–∞—Ç—ã
        if (state.step === 'selecting_chats') {
            await bot.editMessageReplyMarkup(
                createBroadcastKeyboard(state.selectedChats),
                {
                    chat_id: chatId,
                    message_id: state.originalMessageId
                }
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        broadcastStates.set(userId, state);
        await bot.answerCallbackQuery(query.id);

    } catch (error) {
        logAction('BROADCAST_CALLBACK_ERROR', error.message);
        await bot.answerCallbackQuery(query.id, {
            text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
            show_alert: true
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.on('message', async (msg) => {
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    const state = broadcastStates.get(userId);
    if (!state || state.step !== 'waiting_message') {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if (msg.text === '/cancel') {
        broadcastStates.delete(userId);
        await bot.sendMessage(chatId, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
    }

    try {
        // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await bot.sendMessage(chatId, 'üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
        
        let successCount = 0;
        let errorCount = 0;
        const errors = [];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        for (const targetChatId of state.selectedChats) {
            try {
                await bot.copyMessage(targetChatId, chatId, msg.message_id);
                successCount++;
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            } catch (error) {
                errorCount++;
                errors.push(`${targetChatId}: ${error.message}`);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        let report = 'üìä *–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:*\n\n' +
            `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
            `‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n\n`;

        if (errors.length > 0) {
            report += '*–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:*\n' + errors.join('\n');
        }

        await bot.sendMessage(chatId, report, { parse_mode: 'Markdown' });
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcastStates.delete(userId);

        logAction('BROADCAST_COMPLETE', 
            `–£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`
        );

    } catch (error) {
        logAction('BROADCAST_ERROR', error.message);
        await bot.sendMessage(chatId, 
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.'
        );
        broadcastStates.delete(userId);
    }
});

// ===== HTTP –°–ï–†–í–ï–† –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====

// –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer((req, res) => {
    if (req.method !== 'GET') {
        res.writeHead(405, { 'Content-Type': 'text/plain' });
        res.end('Method Not Allowed');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    const uptime = new Date() - new Date(botData.stats.botStartTime);
    const hours = Math.floor(uptime / (1000 * 60 * 60));
    const minutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const html = `
<!DOCTYPE html>
<html>
<head>
    <title>–î–µ—Ç–µ–∫—Ç–æ—Ä –ª–æ—Ö–∞ v${BOT_VERSION}</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
            background: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        .status {
            color: #28a745;
            font-weight: bold;
            padding: 10px;
            background: #e8f5e9;
            border-radius: 5px;
            margin: 20px 0;
        }
        .stats {
            margin: 20px 0;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
        }
        .stat-item {
            margin: 10px 0;
            padding: 5px 0;
            border-bottom: 1px solid #eee;
        }
        .stat-item:last-child {
            border-bottom: none;
        }
        .footer {
            margin-top: 30px;
            color: #666;
            font-size: 0.9em;
        }
        @media (max-width: 600px) {
            body {
                margin: 20px;
            }
            .container {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé≤ –î–µ—Ç–µ–∫—Ç–æ—Ä –ª–æ—Ö–∞ v${BOT_VERSION}</h1>
        
        <div class="status">
            ‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        </div>

        <div class="stats">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
            <div class="stat-item">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(botData.users).length}</div>
            <div class="stat-item">üí¨ –ß–∞—Ç–æ–≤: ${Object.keys(botData.chats).length}</div>
            <div class="stat-item">üé≤ –ë—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–∞: ${botData.stats.totalDiceRolls}</div>
            <div class="stat-item">üì® –°–æ–æ–±—â–µ–Ω–∏–π: ${botData.stats.totalMessages}</div>
            <div class="stat-item">‚ö° –û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${botData.stats.saveErrors}</div>
            <div class="stat-item">‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${hours}—á ${minutes}–º</div>
        </div>

        <div class="stats">
            <h3>üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:</h3>
            <div class="stat-item">üìÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: ${new Date(botData.stats.botStartTime).toLocaleString('ru-RU')}</div>
            <div class="stat-item">üíæ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${
                botData.stats.lastSaveTime 
                ? new Date(botData.stats.lastSaveTime).toLocaleString('ru-RU')
                : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            }</div>
        </div>

        <div class="footer">
            <p>üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru-RU')}</p>
            <p>üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: <a href="https://github.com/THRLNTLS" target="_blank">THRLNTLS</a></p>
        </div>
    </div>
</body>
</html>
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(html);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
    logAction('HTTP_SERVER_ERROR', error.message);
});

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö =====

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function initializeBot() {
    logAction('BOT_INIT', '–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞');

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (octokit) {
            const savedData = await loadFromGitHub('bot_data.json');
            if (savedData) {
                botData.chats = savedData.chats || {};
                botData.users = savedData.users || {};
                botData.immunity = savedData.immunity || {};
                botData.stats = {
                    ...savedData.stats,
                    botStartTime: new Date().toISOString(),
                    totalMessages: savedData.stats?.totalMessages || 0,
                    totalDiceRolls: savedData.stats?.totalDiceRolls || 0,
                    saveErrors: 0
                };
                logAction('BOT_INIT', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub');
            }
        }

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç—ã
        cleanupExpiredImmunity();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        setInterval(autoSave, AUTOSAVE_INTERVAL * 60 * 1000);

        // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        server.listen(PORT, () => {
            logAction('HTTP_SERVER', `–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        process.on('SIGINT', handleShutdown);
        process.on('SIGTERM', handleShutdown);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await updateBotCommands();

        logAction('BOT_INIT', `–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (v${BOT_VERSION})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if (ADMIN_ID) {
            const startMessage = 
                `ü§ñ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ*\n\n` +
                `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                `‚Ä¢ –í–µ—Ä—Å–∏—è: ${BOT_VERSION}\n` +
                `‚Ä¢ –ß–∞—Ç–æ–≤: ${Object.keys(botData.chats).length}\n` +
                `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(botData.users).length}\n` +
                `‚Ä¢ –ü–æ—Ä—Ç: ${PORT}\n` +
                `‚Ä¢ GitHub backup: ${octokit ? '‚úÖ' : '‚ùå'}\n\n` +
                `üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`;

            await bot.sendMessage(ADMIN_ID, startMessage, { parse_mode: 'Markdown' });
        }

    } catch (error) {
        logAction('BOT_INIT_ERROR', error.message);
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function updateBotCommands() {
    try {
        await bot.setMyCommands([
            { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
            { command: 'help', description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
            { command: 'loser', description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ—Ö–∞ –¥–Ω—è' },
            { command: 'stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞' },
            { command: 'myid', description: '–£–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID' },
            { command: 'immunity', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–º' }
        ]);
        logAction('COMMANDS_UPDATE', '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
        logAction('COMMANDS_UPDATE_ERROR', error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async function handleShutdown(signal) {
    logAction('SHUTDOWN', `–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}`);
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
        await autoSave();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if (ADMIN_ID) {
            const shutdownMessage = 
                'üî¥ *–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É*\n\n' +
                `‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}\n` +
                `üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

            await bot.sendMessage(ADMIN_ID, shutdownMessage, { parse_mode: 'Markdown' });
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        server.close(() => {
            logAction('HTTP_SERVER', '–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        bot.stopPolling();
        
        logAction('SHUTDOWN', '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        setTimeout(() => {
            process.exit(0);
        }, 1000);

    } catch (error) {
        logAction('SHUTDOWN_ERROR', error.message);
        process.exit(1);
    }
}

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    logAction('UNCAUGHT_EXCEPTION', error.message);
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    logAction('UNHANDLED_REJECTION', reason?.message || 'Unknown reason');
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
initializeBot().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    process.exit(1);
});